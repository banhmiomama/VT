<div id="headerPopup_CustomerCare" class="header">
    Chỉnh Sửa Ghế Ngồi - <span id="NameRoom"></span>
</div>
<div class="row">
    <div class="ui internally celled grid">
        <div class="row">
            <div class="thirteen wide column">
                <div class="row">
                    @*<div class="exit exit--front fuselage">
                        </div>*@
                    <ol class="cabin fuselage" id="RoomChairBody">
                    </ol>
                    @*<div class="exit exit--back fuselage">
                        </div>*@
                </div>
            </div>
            <div class="three wide column">
                <div class="ui segments">
                    <form class="ui form segment">
                        <div class="ui accordion field">
                            <div class="content field active">
                                <div class="field">
                                    <label>Ghế</label>
                                    <input id="txtNameChair" type="text" style="pointer-events: none;" />
                                </div>
                                <div class="field">
                                    <label>Loại</label>
                                    <div class="ui fluid search selection dropdown" id="ChairType">
                                        <input type="hidden" name="country">
                                        <i class="dropdown icon"></i>
                                        <div class="default text">Chọn Loại Ghế</div>
                                        <div class="menu" id="cbbChairType">
                                        </div>
                                    </div>
                                </div>
                                <div class="field">
                                    <button style="width:100%;" class="ui teal button" type="button" onclick="return ExcuteDataChairType()">Cập Nhật</button>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        <div class="ui segment" id="TableListTicket" style="display:none">
            <h3  class="header" style="text-align:center">
                Danh Sách Khách Hàng đã đặt ghế ( <span id="TicketNameChair"></span> )
            </h3>
            <div class="row ui sortable celled table" id="ListTicket">
                <table>
                    <thead>
                        <tr>
                            <td style="min-width:150px">MSKH</td>
                            <td style="min-width:150px">Tên</td>
                            <td style="min-width:150px">Email</td>
                            <td style="min-width:150px">Phim</td>
                            <td>Ngày Chiếu</td>
                            <td>Đã Thanh Toán</td>
                        </tr>
                    </thead>
                    <tbody id="ListTicketBody"></tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<div class="actions">
    <div style="float: right">
        <button class="ui grey button" onclick="event.preventDefault();CloseModal()">Cancel</button>
    </div>
</div>
<script src="/js/customjs/custom-validation.js"></script>
<script src="/js/main.js"></script>
<script>
    var DataChairType;
    var DataChairRoom;
    $(document).ready(function () {
        RoomDetailID = @ViewBag.RoomID;
        LoadDataUpdateRoom();
        LoadRoomChair(RoomDetailID);
        LoadDataChairType();
    })
    function LoadDataUpdateRoom() {
        $.ajax({
            type: 'GET',
            dataType: "json",
            contentType: 'application/json; charset=utf-8',
            url: "/Admin/RoomDetail/GetRoomDetail/" + RoomDetailID,
            async: true,
            success: function (result) {
                let data = result.Table1;
                if (data.length != 0) {
                    $('#NameRoom').text((data[0].Name));
                }
            }
        });
    }
    function LoadRoomChair(RoomID) {
        $.ajax({
            type: 'GET',
            dataType: "json",
            contentType: 'application/json; charset=utf-8',
            url: "/Admin/RoomDetail/GetRoomChairDetail/" + RoomID,
            async: true,
            success: function (result) {
                let NameRow = result.Table;
                let Chair = result.Table1;
                RenderRoomChair(NameRow, Chair, "RoomChairBody")
            }
        });
    }
    function LoadDataChairType() {
        $.ajax({
            type: 'POST',
            dataType: "json",
            contentType: 'application/json; charset=utf-8',
            url: "/Admin/RoomDetail/DataChairType",
            async: true,
            success: function (data) {
                DataChairType = data;
                LoadCombo(DataChairType, "cbbChairType");
            }
        });
    }
    function RenderRoomChair(RowChair, Chair, id) {
        var myNode = document.getElementById(id);
        if (myNode != null) {
            myNode.innerHTML = '';
            let stringContent = '';
            if (Chair && Chair.length > 0) {
                for (var i = 0; i < RowChair.length; i++) {
                    let rc = RowChair[i];
                    let items = Chair.filter(data => data.RowChair == RowChair[i].ID);
                    let tr = '<li class="seat"><label for="' + rc.NameRow + '" >' + rc.NameRow + '</label></li>';
                    for (var j = 0; j < items.length; j++) {
                        items = items.sort(function (a, b) { return a.ColumnChair - b.ColumnChair; })
                        item = items[j];
                        tr += '<li class="seat"  style="flex-grow:' + item.Total + ';max-width:calc(40px * ' + item.Total + ')" >'
                            + '<input type="checkbox" value="' + item.NameRow + '" id="' + item.NameRow + item.ColumnChair + '" ' + item.DisabledChair + '/>'
                            + '<label data-id="' + item.ID + '" data-type="' + item.TypeChair + '" for="' + item.NameRow + item.ColumnChair + '" style="background:' + item.ColorCode + '">' + item.NameRow + item.ColumnChair + '</label> </li>'
                    }
                    stringContent = stringContent + '<li class="row"><ol class="seats" type="' + rc.NameRow + '">' + tr + '</ol></li>';
                }
            }
            document.getElementById(id).innerHTML = stringContent;
            OnclickSeatDetail();
        }   
    }
    function OnclickSeatDetail() {
        $('#RoomChairBody').on('click', '.seat label', function () {
            var idSeat = $(this).attr('data-id');
            var idChairType = $(this).attr('data-type');
            var name = $(this).attr('for');
            if (idSeat != 0) {
                IDChair = Number(idSeat);
                $('#txtNameChair').val(name);
                $("#ChairType").dropdown("refresh");
                $("#ChairType").dropdown("set selected", idChairType);
            }
        })
    }
    function ExcuteDataChairType() {
        var data = new Object();
        data.IDChair = IDChair
        data.Type = $("#ChairType").dropdown('get value') ? Number($("#ChairType").dropdown('get value')) : 0;
        if (IDChair != 0) {
            $.ajax({
                url: "/Admin/RoomDetail/ExecuteChairType",
                dataType: "json",
                type: "POST",
                data: {
                    __RequestVerificationToken: token
                    , data: JSON.stringify(data)
                },
                async: true,
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    notiError("Lỗi Hệ Thống");
                },
                success: function (result) {
                    if (result.length != 0) {
                        let data = result;
                        $('#TableListTicket').css('display', 'block');
                        $('#TicketNameChair').text($('#txtNameChair').text());
                        Render_ListTicket(data, "ListTicketBody");
                        notiWarning('Đã có khách hàng đặt ghế này rồi không thể thay đỗi loại ghế'); 
                    }
                    else {
                        $('#TableListTicket').css('display', 'none');
                        notiSuccess();
                    }
                    LoadRoomChair(RoomDetailID);
                }
            })
            return false;
        }
        else notiWarning("Vui Lòng Chọn Ghế Cần Thay Đỗi");
    }
    function Render_ListTicket(data, id) {
        var myNode = document.getElementById(id);
        if (myNode != null) {
            myNode.innerHTML = '';
            let stringContent = '';
            if (data && data.length > 0) {
                for (var i = 0; i < data.length; i++) {
                    let item = data[i];
                    let tr = '<td>' + item.CustomerCode + '</td>'
                        + '<td>' + item.LastName + ' ' + item.Name + '</td>'
                        + '<td>' + item.Email + '</td>'
                        + '<td>' + item.Name_VN +'</td>'
                        + '<td>' + item.ShowTime + '</td>'                        
                        + '<td>' + item.Price + '</td>'                        
                    stringContent = stringContent + '<tr class="seachRow" role="row">' + tr + '</tr>';
                }
            }
            document.getElementById(id).innerHTML = stringContent;
        }
    }
</script>
<style>
    .plane {
        margin: 20px auto;
        max-width: 300px;
    }

    .cockpit {
        height: 250px;
        position: relative;
        overflow: hidden;
        text-align: center;
        border-bottom: 5px solid #d8d8d8;
    }

        .cockpit:before {
            content: "";
            display: block;
            position: absolute;
            top: 0;
            left: 0;
            height: 500px;
            width: 100%;
            border-radius: 50%;
            border-right: 5px solid #d8d8d8;
            border-left: 5px solid #d8d8d8;
        }

        .cockpit h1 {
            width: 60%;
            margin: 100px auto 35px auto;
        }

    .exit {
        position: relative;
        height: 50px;
    }

        .exit:before, .exit:after {
            content: "EXIT";
            font-size: 14px;
            line-height: 18px;
            padding: 0px 2px;
            font-family: "Arial Narrow", Arial, sans-serif;
            display: block;
            position: absolute;
            background: green;
            color: white;
            top: 50%;
            transform: translate(0, -50%);
        }

        .exit:before {
            left: 0;
        }

        .exit:after {
            right: 0;
        }

    ol {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .seats {
        display: flex;
        flex-direction: row;
        flex-wrap: nowrap;
        justify-content: flex-start;
    }

    .seat {
        display: flex;
        /*flex: 0 0 14.2857142857%;*/
        padding: 5px;
        position: relative;
        max-width: 50px;
    }

    .seats .seat:nth-child(1) {
        flex-grow: 1;
    }

    .seat input[type="checkbox"] {
        position: absolute;
        opacity: 0;
    }

        .seat input[type="checkbox"]:checked + label {
            background: #bada55 !important;
            -webkit-animation-name: rubberBand;
            animation-name: rubberBand;
            animation-duration: 300ms;
            animation-fill-mode: both;
        }

        .seat input[type="checkbox"]:disabled + label {
            background: #ddd;
            text-indent: -9999px;
            overflow: hidden;
        }

            .seat input[type="checkbox"]:disabled + label:after {
                content: "X";
                text-indent: 0;
                position: absolute;
                top: 4px;
                left: 50%;
                transform: translate(-50%, 0%);
            }

            .seat input[type="checkbox"]:disabled + label:hover {
                box-shadow: none;
                cursor: not-allowed;
            }

    .seat label {
        display: block;
        position: relative;
        width: 100%;
        text-align: center;
        font-size: 14px;
        font-weight: bold;
        line-height: 1.5rem;
        padding: 4px 0;
        background: #f42536;
        border-radius: 5px;
        animation-duration: 300ms;
        animation-fill-mode: both;
    }

        .seat label:before {
            content: "";
            position: absolute;
            width: 75%;
            height: 75%;
            top: 1px;
            left: 50%;
            transform: translate(-50%, 0%);
            background: rgba(255, 255, 255, 0.4);
            border-radius: 3px;
        }

        .seat label:hover {
            cursor: pointer;
            box-shadow: 0 0 0px 2px #5c6aff;
        }

    .AddNewRowChair {
        padding: 0;
        border: none;
        background-color: transparent;
        outline: none;
    }

        .AddNewRowChair:hover i {
            transform: rotate(90deg);
        }

        .AddNewRowChair:focus i {
            color: darkgreen;
        }
    #RoomChairBody .row .seats .seat:first-child label {
        pointer-events: none;
    }
    @@-webkit-keyframes rubberBand {
        0% {
            -webkit-transform: scale3d(1, 1, 1);
            transform: scale3d(1, 1, 1);
        }

        30% {
            -webkit-transform: scale3d(1.25, 0.75, 1);
            transform: scale3d(1.25, 0.75, 1);
        }

        40% {
            -webkit-transform: scale3d(0.75, 1.25, 1);
            transform: scale3d(0.75, 1.25, 1);
        }

        50% {
            -webkit-transform: scale3d(1.15, 0.85, 1);
            transform: scale3d(1.15, 0.85, 1);
        }

        65% {
            -webkit-transform: scale3d(0.95, 1.05, 1);
            transform: scale3d(0.95, 1.05, 1);
        }

        75% {
            -webkit-transform: scale3d(1.05, 0.95, 1);
            transform: scale3d(1.05, 0.95, 1);
        }

        100% {
            -webkit-transform: scale3d(1, 1, 1);
            transform: scale3d(1, 1, 1);
        }
    }

    @@keyframes rubberBand {
        0% {
            -webkit-transform: scale3d(1, 1, 1);
            transform: scale3d(1, 1, 1);
        }

        30% {
            -webkit-transform: scale3d(1.25, 0.75, 1);
            transform: scale3d(1.25, 0.75, 1);
        }

        40% {
            -webkit-transform: scale3d(0.75, 1.25, 1);
            transform: scale3d(0.75, 1.25, 1);
        }

        50% {
            -webkit-transform: scale3d(1.15, 0.85, 1);
            transform: scale3d(1.15, 0.85, 1);
        }

        65% {
            -webkit-transform: scale3d(0.95, 1.05, 1);
            transform: scale3d(0.95, 1.05, 1);
        }

        75% {
            -webkit-transform: scale3d(1.05, 0.95, 1);
            transform: scale3d(1.05, 0.95, 1);
        }

        100% {
            -webkit-transform: scale3d(1, 1, 1);
            transform: scale3d(1, 1, 1);
        }
    }

    .rubberBand {
        -webkit-animation-name: rubberBand;
        animation-name: rubberBand;
    }
</style>